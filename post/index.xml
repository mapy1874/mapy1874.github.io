<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts | Patrick Ma</title>
    <link>https://mapy1874.github.io/post/</link>
      <atom:link href="https://mapy1874.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <description>Posts</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Tue, 23 Feb 2021 13:20:41 -0300</lastBuildDate>
    <image>
      <url>https://mapy1874.github.io/images/icon_huc150438b37d3fb5834aec482eaf638f2_3872_512x512_fill_lanczos_center_2.png</url>
      <title>Posts</title>
      <link>https://mapy1874.github.io/post/</link>
    </image>
    
    <item>
      <title>Lazy Evaluation</title>
      <link>https://mapy1874.github.io/post/lazy-evaluation/</link>
      <pubDate>Tue, 23 Feb 2021 13:20:41 -0300</pubDate>
      <guid>https://mapy1874.github.io/post/lazy-evaluation/</guid>
      <description>&lt;h2 id=&#34;whatwhy&#34;&gt;What&amp;amp;Why&lt;/h2&gt;
&lt;p&gt;When you see the name &lt;em&gt;lazy evaluation&lt;/em&gt;, you might wonder what is its difference from evaluation, which means running the program according to the semantics of your language. Well, lazy evaluation is a great modification to a basic evaluator. It follows the principle of laziness: delaying evaluation of procedure arguments until the last possible moment. Consider the following example from 
&lt;a href=&#34;https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book-Z-H-27.html#%25_sec_4.2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SICP&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-scheme&#34;&gt;(define (try a b)
  (if (= a 0) 1 b))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using basic the evaluator in COMP524, &lt;code&gt;(try 0 (/ 1 0))&lt;/code&gt; will raise an error as the denominator cannot be 0. However, with lazy evaluation, there would be no error at all! Evaluating the example would return 1, as the argument &lt;code&gt;(/ 1 0)&lt;/code&gt; would never be evaluated: the evaluator promises &lt;code&gt;(/ 1 0)&lt;/code&gt; to be evaluated until it is actually used. We call languages with lazy evaluation as &lt;em&gt;normal-order&lt;/em&gt; languages. Also, we say a procedure is &lt;em&gt;non-strict&lt;/em&gt; in an argument if the argument is not evaluated before the body of the procedure.&lt;/p&gt;
&lt;p&gt;Another example of lazy evaluation is short-circuit evaluation&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;false &amp;amp;&amp;amp; (true || false &amp;amp;&amp;amp; true)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As we have the logical operator &lt;em&gt;and&lt;/em&gt; here, any part being evaluated to &lt;code&gt;false&lt;/code&gt; will lead to the whole expression being &lt;code&gt;false&lt;/code&gt;. Thus, lazy evaluation will only look at &lt;code&gt;false&lt;/code&gt; and skip &lt;code&gt;(true || false &amp;amp;&amp;amp; true)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;From the above example, we can say that sometimes lazy evaluation can help reduce error, and we could save (perhaps loooong) evaluation time of an operand never needed in the body of a procedure. Popular languages like Python also integrate lots of lazy evaluation functionalities. We will see more pros and cons of lazy evaluation at the end of this post.&lt;/p&gt;
&lt;h2 id=&#34;two-implementations-of-lazy-evaluation&#34;&gt;Two Implementations of Lazy Evaluation&lt;/h2&gt;
&lt;p&gt;There are two implementations of lazy evaluation: &lt;em&gt;call-by-name&lt;/em&gt; and &lt;em&gt;call-by-need&lt;/em&gt;. Before we dive deeper into that, let&amp;rsquo;s introduce a new concept called &lt;em&gt;thunk&lt;/em&gt;. The idea is that, argument evaluation is going to be delayed when applying a procedure. The delayed arguments will be transformed into objects called &lt;em&gt;thunks&lt;/em&gt;, which contain necessary information to produce the value of the argument. That being said, a thunk must contain the argument expression and the environment when the procedure is being called. In other words, a thunk is a shell for a delayed expression. The following list can represent a thunk&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-scheme&#34;&gt;(list &#39;thunk exp env)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Thunk is an important object in implementing lazy evaluation. The process of forming a thunk is called &lt;em&gt;freezing&lt;/em&gt;, or &lt;em&gt;delay&lt;/em&gt;. The process of evaluating a thunk is called &lt;em&gt;thawing&lt;/em&gt;, or &lt;em&gt;forcing&lt;/em&gt;. When we want to evaluate thunks, we can memoize the value of the argument, or evaluate the same thunk again in the future. This leads two different implementations of lazy evaluation, defined 
&lt;a href=&#34;https://academic.udayton.edu/saverioperugini/courses/cps343/lecture_notes/lazyevaluation.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt; as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;call-by-name&lt;/em&gt;: invokes thunk every time parameter is referenced; disadvantage: it is a waste of time when side-effects are not possible because the same value is returned each time&lt;/li&gt;
&lt;li&gt;&lt;em&gt;call-by-need&lt;/em&gt;: records the value of each thunk the first time it is called, and thereafter refers to the saved value rather than re-invoking the thunk; this is an example of a more general technique called &lt;em&gt;memoization&lt;/em&gt;, which is also used in &lt;em&gt;dynamic programming&lt;/em&gt; (take COMP 550)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In other words, call-by-name is non-memoized lazy evaluation, while call-by-need is memoized lazy evaluation.&lt;/p&gt;
&lt;h2 id=&#34;useful-scenarios&#34;&gt;Useful scenarios&lt;/h2&gt;
&lt;h4 id=&#34;stream-object&#34;&gt;Stream Object&lt;/h4&gt;
&lt;p&gt;With call-by-need, we could implement a stream abstraction. A stream object is a pair-like object, except the cdr part is not evaluated until needed. Thus, the data structure may be infinite!&lt;/p&gt;
&lt;center&gt;
  &lt;img src=&#34;stream_object.png&#34;&gt;
  &lt;figcaption&gt;A stream object (from &lt;a href=&#34;https://www.youtube.com/watch?v=vAxgBQ0sA00&amp;list=PL7BcsI5ueSNFPCEisbaoQ0kXIDX9rR5FF&amp;index=19&amp;ab_channel=LeonByford&#34;&gt;here&lt;/a&gt;)&lt;/figcaption&gt;
&lt;/center&gt;
&lt;p&gt;Suppose we want to find the first 100 prime numbers between 1 to 100000000, without stream object, the procedure will look like&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-scheme&#34;&gt;(list-ref 
 	(filter (lambda (x) (prime? x))
          (enumerate-interval 1 100000000))
 	100)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This can be costly as we need to generate the entire list of integers from 1 to 100000000 before proceeding. Stream object can save us from generating a huge list. First, we define two helper procedures in generating stream objects as a list and selecting elements we want in the stream.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-scheme&#34;&gt;;; generate a stream list, which is lazy
(define (stream-interval a b)
  (if (&amp;gt; a b)
      the-empty-stream
      (cons-stream a (stream-interval (+ a 1) b))))

;; filter out elements satify the predicate in stream
(define (stream-filter predicate str)
  (if (predicate (stream-car str))	
      ;; 1st elt of stream satisfies predicate. e.g., elt is a prime num
      (cons-stream (stream-car str)
                   (stream-filter predicate 
                                  (stream-cdr str)))
      (stream-filter predicate (stream-cdr str))))

;; stream-car, stream-cdr, cons-stream are procedures 
;; implementing lazy evaluation for the stream object
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we have the improved version of &lt;code&gt;list-ref&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-scheme&#34;&gt;(stream-ref 
 	(stream-filter (lambda (x) (prime? x))
                 (stream-interval 1 100000000))
 	100)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;stream-interval&lt;/code&gt; promises to generate the numbers between 1 to 10000000, but once the first value is generated, it is immediately passed to &lt;code&gt;stream-filter&lt;/code&gt;.  Then &lt;code&gt;stream-filter&lt;/code&gt; will ask for the next element in the stream. The program will now go back to &lt;code&gt;stream-interval&lt;/code&gt; for the second number, etc. As a consequence, we just need to find the first 100 prime numbers and exit the procedure using &lt;code&gt;stream-ref&lt;/code&gt; now!&lt;/p&gt;
&lt;h4 id=&#34;yield-in-python&#34;&gt;&lt;code&gt;yield&lt;/code&gt; in Python&lt;/h4&gt;
&lt;p&gt;Here is another similar example in Python.&lt;/p&gt;
&lt;p&gt;We are used to writing code like &lt;code&gt;createIterable&lt;/code&gt;. This can be troublesome when the list size is so large that the performance of programs may be compromised.  The keyword &lt;code&gt;yield&lt;/code&gt; can solve this by following the principle of laziness. &lt;code&gt;createGenerator&lt;/code&gt; will not return an actual element until it is forced to &amp;ldquo;yield&amp;rdquo; one. In other words, &lt;strong&gt;when you call the function, the code you have written in the function body does not run.&lt;/strong&gt; Thus, &lt;code&gt;createGenerator&lt;/code&gt; processes &lt;code&gt;i=0&lt;/code&gt;, and takes a break until the next element in the generator is asked. Because of its laziness, what  &lt;code&gt;yield&lt;/code&gt;  returns can only be used once, while an iterable list can be iterated multiple times.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;# return a list as a whole
def createIterable():
	mylist = []
	for i in range(3):
		mylist.append(i*i)
	return mylist

for i in createIterable():
	print(i)	# print 0, 1, 4
  
# yield elements one by one
def createGenerator():
	mylist = range(3)
	for i in mylist:
		yield i*i

for i in createGenerator():
	print(i)	# print 0, 1, 4
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;more-about-lazy-evaluation&#34;&gt;More about Lazy Evaluation&lt;/h2&gt;
&lt;p&gt;Pros (based on Dr. Perugini&amp;rsquo;s 
&lt;a href=&#34;https://academic.udayton.edu/saverioperugini/courses/cps343/lecture_notes/lazyevaluation.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PL course&lt;/a&gt;)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;saves the work required to evaluate an unused argument and sometimes prevent an error&lt;/li&gt;
&lt;li&gt;leads to a uniform language; no need for special syntactic forms (e.g., &lt;code&gt;if&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;language can be extended by programmers in standard ways&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cons (based on Dr. Perugini&amp;rsquo;s 
&lt;a href=&#34;https://academic.udayton.edu/saverioperugini/courses/cps343/lecture_notes/lazyevaluation.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PL course&lt;/a&gt;)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;call-by-name can be inefficient if an argument is used more than once in the body (so use call-by-need version then)&lt;/li&gt;
&lt;li&gt;call-by-need makes a program difficult to understand in the presence of side-effects&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Other applications of lazy evaluation (based on Dr. Perugini&amp;rsquo;s 
&lt;a href=&#34;https://academic.udayton.edu/saverioperugini/courses/cps343/lecture_notes/lazyevaluation.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PL course&lt;/a&gt;)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;same-fringe&lt;/em&gt; problem&lt;/li&gt;
&lt;li&gt;combinatorial search (e.g., a tree) in AI&lt;/li&gt;
&lt;li&gt;lends itself to straightforward implementation of important recursive algorithms (e.g. quicksort)&lt;/li&gt;
&lt;li&gt;overall, streams and filters are used in concert in a &lt;em&gt;genertor-filter&lt;/em&gt; style of programming&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Other Laziness in Computer Science&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Caching: keeping copies of data around&lt;/li&gt;
&lt;li&gt;DevOps: automating the deployment and maintenance cycle&lt;/li&gt;
&lt;li&gt;Documentation: writing great documentation about your code so that others won’t bother you&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>DevOps Notes</title>
      <link>https://mapy1874.github.io/post/devops-notes/</link>
      <pubDate>Tue, 09 Jun 2020 17:13:57 -0400</pubDate>
      <guid>https://mapy1874.github.io/post/devops-notes/</guid>
      <description>&lt;h2 id=&#34;docker&#34;&gt;Docker&lt;/h2&gt;
&lt;h3 id=&#34;1-use-docker-images&#34;&gt;1. Use Docker Images&lt;/h3&gt;
&lt;p&gt;Run a container from a image. Execute this command for multiple times will generate several different containers from the same image.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run &amp;lt;image&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lists the containers that are &lt;strong&gt;still running&lt;/strong&gt;. Add the &lt;code&gt;-a&lt;/code&gt; switch in order to see containers that &lt;strong&gt;have stopped&lt;/strong&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker ps
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Retrieves the logs of a container, even when it has stopped&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker logs &amp;lt;id&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;See the most recent 10 seconds of logs for our running container:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker logs --since 10s &amp;lt;id&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Gets detailed information about a running or stopped container&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker inspect &amp;lt;id&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Stop a container that is still running&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker stop &amp;lt;id&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Deletes a container&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docekr rm &amp;lt;id&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Deletes all stopped container&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker container prune -f
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let my machine to listen for incoming connections on port 8085 and route them to port 80 inside a container that runs NGINX.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-d&lt;/code&gt; is meant to disconnect while allowing the long-lived container to continue running in the background. Running a container as detached means that you immediately get your command-line back and the standard output from the container is not redirected to your command-line anymore.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -d -p 8085:80 nginx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Use volumes&lt;/p&gt;
&lt;p&gt;When the container dies (the host machine restarts, the container is moved from one node to another in a cluster, it simply fails, etc.) all of that data is lost. Using a volume, you map a directory inside the container to a persistent storage.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;docker run -v /your/dir:/var/lib/mysql -d mysql:5.7
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;List the local images:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker image ls
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-create-docker-image&#34;&gt;2. Create Docker Image&lt;/h3&gt;
&lt;p&gt;Two basic components: A Docker image is created using the &lt;em&gt;docker build&lt;/em&gt; command and a &lt;em&gt;Dockerfile&lt;/em&gt; file.&lt;/p&gt;
&lt;h4 id=&#34;dockerfile-instructions&#34;&gt;Dockerfile Instructions&lt;/h4&gt;
&lt;p&gt;FROM: A &lt;em&gt;Dockerfile&lt;/em&gt; file always begins with a &lt;em&gt;FROM&lt;/em&gt; instruction because every image is based on another base image.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;FROM node:11-alpine
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Don’t use latest! First of all, it doesn’t mean that any running container will be based on the latest available version of the &lt;em&gt;nginx&lt;/em&gt; image. Docker is about having reproducible images, so the &lt;em&gt;latest&lt;/em&gt; version is evaluated when you build your image, not when the container is run. This means that the version will not change unless you run the &lt;em&gt;docker build&lt;/em&gt; command again.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;COPY: Useful when I want files to be part of an image I create. Its first parameter is the file to be copied from the build context and its second parameter is the destination directory inside the image.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;COPY index.html /usr/share/nginx/html
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;CMD: The &lt;em&gt;CMD&lt;/em&gt; instruction specifies which executable is run when a container is created using your image and provides optional arguments.&lt;/p&gt;
&lt;p&gt;Both the program to run and its arguments are provided as a JSON array of strings.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;CMD [&amp;quot;echo&amp;quot;, &amp;quot;Hello world&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ENV: Define a default value for an environment variable, in case it isn’t provided when a container is created; this may be done in the &lt;em&gt;Dockerfile&lt;/em&gt; file, using the &lt;em&gt;ENV&lt;/em&gt; instruction.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;ENV radius=20
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The environment variables can be access in shell by $radius, in Node.JS by process.env.name&lt;/p&gt;
&lt;p&gt;VOLUME: store your data in a persistent file system.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;VOLUME /path/to/directory
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;em&gt;/path/to/directory&lt;/em&gt; is a path to a directory used inside the image. When a container is created using the &lt;em&gt;docker run&lt;/em&gt; command, the &lt;em&gt;-v&lt;/em&gt; switch can be used to map this directory to an actual volume on the host system.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Caveat: It’s best not to think about containers as long-lived, even when they are. Don’t store information inside the containers. In other words, ensure your containers are stateless, not stateful. A stateless container never stores its state when it is run while stateful containers store some information about their state each time they are run. We’ll see later on how and where to store your container’s state. Docker containers are very stable, but the reason for having stateless containers is that this allows for easy scaling up and recovery. More about that later.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;EXPOSE: Purely for documentation purposes. It enables someone who wants to run a container from your image to know which ports they should redirect to the outside world using the &lt;em&gt;-p&lt;/em&gt; switch of the &lt;em&gt;docker run&lt;/em&gt; command.&lt;/p&gt;
&lt;p&gt;Listen to TCP port 80:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;EXPOSE 80
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;build-command&#34;&gt;Build command&lt;/h4&gt;
&lt;p&gt;Build the dockerfile in current directory and name the image as &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker build -t &amp;lt;name&amp;gt; .
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run a container from the image created (i.e. &lt;code&gt;hello&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;--rm&lt;/code&gt; let docker trash the created container after execution.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm hello
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;-it&lt;/code&gt; allows the user to stop the container using Ctrl-C from the command-line&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm -it -p 8082:80 webserver
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;3-publish-docker-images&#34;&gt;3. Publish Docker Images&lt;/h3&gt;
&lt;p&gt;A three-step process:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Build your image (&lt;em&gt;docker build&lt;/em&gt;) with the appropriate prefix name or tag (&lt;em&gt;docker tag&lt;/em&gt;) an existing one appropriately.&lt;/p&gt;
&lt;p&gt;For a image in the current directory that is not built yet:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker build -t &amp;lt;username&amp;gt;/&amp;lt;name&amp;gt;:&amp;lt;tag&amp;gt; .
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For an existing image:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker tag &amp;lt;name&amp;gt; &amp;lt;username&amp;gt;/&amp;lt;name&amp;gt;:&amp;lt;tag&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Log into the Registry (&lt;em&gt;docker login&lt;/em&gt;).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker login -u &amp;lt;username&amp;gt; -p &amp;lt;password&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Push the image into the Registry (&lt;em&gt;docker push&lt;/em&gt;).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker push &amp;lt;username&amp;gt;/&amp;lt;name&amp;gt;:&amp;lt;tag&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Private registries: A private registry ensures that only you can access your private images, while a public registry allows you to make your private images public for selective parties.&lt;/p&gt;
&lt;p&gt;Which list of factors influences the size of an image?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The files included in your image&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Avoid &lt;code&gt;COPY&lt;/code&gt; instructions that are too broad like &lt;code&gt;COPY . .&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Use &lt;em&gt;.dockerignore&lt;/em&gt; to exclude files that should be excluded from the build&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The base image size&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;debian:8-slim&lt;/code&gt; is smaller than &lt;code&gt;debian:8&lt;/code&gt;, &lt;code&gt;nginx:1.15-alpine&lt;/code&gt; is smaller than &lt;code&gt;nginx:1.15&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Image layers&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;In a future build, Docker will use the cached part instead of recreating it as long as it is possible.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When pushing a new version of the image to a Registry, the common part is not pushed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When pulling an image from a registry, the common part you already have is not pulled.&lt;/p&gt;
&lt;p&gt;The following &lt;em&gt;docekrfile&lt;/em&gt; places &lt;code&gt;COPY&lt;/code&gt; instruction at the very end as this is then instruction that will change a lot. If putting &lt;code&gt;COPY&lt;/code&gt; right after &lt;code&gt;FROM&lt;/code&gt;, the &lt;code&gt;RUN&lt;/code&gt; instruction will also need to be pushed or pulled in this case.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;FROM debian:8
     
RUN apt-get update &amp;amp;&amp;amp; apt-get upgrade &amp;amp;&amp;amp; apt-get dist-upgrade -y
RUN apt-get install -y php5
     
COPY . .
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Thoughts on a Jensen&#39;s Inequality Question</title>
      <link>https://mapy1874.github.io/post/jensens-inequality-1/</link>
      <pubDate>Sun, 24 May 2020 15:42:15 -0400</pubDate>
      <guid>https://mapy1874.github.io/post/jensens-inequality-1/</guid>
      <description>&lt;h2 id=&#34;question&#34;&gt;Question&lt;/h2&gt;
&lt;p&gt;Given a non-negative random variable $X$, and positive integers $n$, $m$, show that if $n \le m $, $[E(X^{n})]^{\frac{1}{n}} \le [E(X^{m})]^{\frac{1}{m}}$.&lt;/p&gt;
&lt;h3 id=&#34;analysis&#34;&gt;Analysis:&lt;/h3&gt;
&lt;p&gt;Intuitively, the problem may need techniques like Jensen&amp;rsquo;s Inequality as there is expectation and concave ($a^{\frac{1}{m}}$) &amp;amp; convex functions ($a^{m}$). However, it would be hard to use Jensen directly without proper transformation. Recall that Jensen&amp;rsquo;s Ineuqality states:
$$
f(EX) \le Ef(X) ~~~~~~~~~ \text{if  $f(.)$ is convex} \&lt;br&gt;
$$&lt;/p&gt;
&lt;p&gt;$$
f(EX) \ge Ef(X) ~~~~~~~~~ \text{if  $f(.)$ is concave.}
$$&lt;/p&gt;
&lt;h4 id=&#34;attempt-1&#34;&gt;Attempt 1&lt;/h4&gt;
&lt;p&gt;We can try to apply Jensen partially to the LHS to see if it gives us a intermediate expression.&lt;/p&gt;
&lt;p&gt;We know that $f(a)=a^n$ is convex on $[0,\infty)$ if $n \ge 1$.  Using Jensen, we have
$$
E(X^n) \ge (EX)^n \   [E(X^n)]^{\frac{1}{n}} \ge [(EX)^n]^{\frac{1}{n}}=EX
$$
This is not we want as Jensen finds a lower bound for the LHS and proving $EX \le [E(X^{m})]^{\frac{1}{m}}$ does not lead to our goal.&lt;/p&gt;
&lt;h4 id=&#34;attempt-2&#34;&gt;Attempt 2&lt;/h4&gt;
&lt;p&gt;What about applying to the concave function  ($a^{\frac{1}{m}}$) ?&lt;/p&gt;
&lt;p&gt;We know that $f(a)=a^{\frac{1}{n}}$ is concave on $[0,\infty)$ if $n \ge 1$.  Using Jensen, we have
$$
[E(X^n)]^{\frac{1}{n}} \ge E(X)^{n\frac{1}{n}}=EX
$$
Same lower bound. Not helpful, either!&lt;/p&gt;
&lt;h4 id=&#34;attempt-3&#34;&gt;Attempt 3&lt;/h4&gt;
&lt;p&gt;The failure in finding a good intermediate form motivates me to look back and  exam the correctness of the proposition in a basic case.&lt;/p&gt;
&lt;p&gt;Recall that variance of a randome variable is always non-negative:
$$
Var(X) = E(X-EX)^2		=EX^2-2E(XEX)+(EX)^2
$$&lt;/p&gt;
&lt;p&gt;$$
= EX^2-(EX)^2		\ge 0.
$$&lt;/p&gt;
&lt;p&gt;We have:
$$
(EX)^2 \le EX^2 \Leftrightarrow EX \le (EX^2)^{\frac{1}{2}} \Leftrightarrow (EX^1)^{\frac{1}{1}} \le (EX^2)^{\frac{1}{2}},
$$
which is true for non-negative random variable.&lt;/p&gt;
&lt;p&gt;In this case, $n=1, ~ m = 2$. Can we try to reverse the general case into a well-formatted form like $(EX)^2 \le EX^2$?
$$
(EX^n)^{\frac{1}{n}} \le (EX^m)^{\frac{1}{m}}  \&lt;br&gt;
\Leftrightarrow (EX^n)^{\frac{m}{n}} \le EX^m \&lt;br&gt;
\Leftrightarrow (EX^n)^{\frac{m}{n}} \le EX^{n\frac{m}{n}}
$$
Boom! The reversed roadmap for transforming basic case into our goal worked! Here we have a random variable $Y=X^n$, convex function $g(a)=a^{\frac{m}{n}}$ as $\frac{m}{n} \ge 1$. The final form can be treated as $g(EY) \le E[g(Y)]$, which is true by Jensen&amp;rsquo;s Inequality! We can finally prove the proposition!&lt;/p&gt;
&lt;h3 id=&#34;proof&#34;&gt;Proof&lt;/h3&gt;
&lt;p&gt;Let $Y=X^n, g(a) = a^{\frac{m}{n}}$.&lt;/p&gt;
&lt;p&gt;Since
$$
g&#39;&#39;(a) = \frac{m}{n}.(\frac{m}{n}-1).a^{\frac{m}{n}-2} \ge 0 ~~\forall a \in [0, \infty),
$$
$g(a)$ is convex on $[0,\infty)$.&lt;/p&gt;
&lt;p&gt;By Jensen&amp;rsquo;s Inequality:
$$
(EX^n)^{\frac{m}{n}} = (EY)^{\frac{m}{n}} \le E(Y^{\frac{m}{n}}) =  E([X^n]^{\frac{m}{n}})=EX^m
$$&lt;/p&gt;
&lt;p&gt;$$
\Leftrightarrow [E(X^{n})]^{\frac{1}{n}} \le [E(X^{m})]^{\frac{1}{m}}. ~~~~~~~~~~~\square
$$&lt;/p&gt;
&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;We solved the problem by tracing back to the basic case and used it as a guide for proving the general case. Sometimes mathematical gymnastics helps us a lot.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
